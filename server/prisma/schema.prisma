generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./single_user.db"
}

// User model removed for single user mode
// All data belongs to the single local user

model Chat {
  id           String            @id @default(cuid())
  title        String?
  metadata     Json?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  messages     Message[]
}

// ChatParticipant model removed for single user mode
// All chats belong to the single local user

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  
  // Store sender as simple string instead of foreign key
  senderType String  // "user" or "ai"
  chatId     String

  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  // Relacja wskazująca, że wiadomość może mieć wiele załączników.
  attachments Attachment[]
}

// 👇 --- DODANY CAŁY MODEL ---
// Reprezentuje pojedynczy plik załączony do wiadomości.
model Attachment {
  id        String   @id @default(cuid())
  url       String   // URL do pliku w chmurze (np. AWS S3)
  filename  String   // Oryginalna nazwa pliku
  mimetype  String   // Typ MIME, np. "image/png" czy "application/pdf"
  size      Int      // Rozmiar pliku w bajtach
  createdAt DateTime @default(now())

  // Relacja zwrotna do wiadomości
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

// 👇 --- PAMIĘĆ WEKTOROWA ---
// Główna tabela przechowująca wpisy pamięci wektorowej
model VectorMemory {
  id              String   @id @default(cuid())
  content         String   // Oryginalny tekst wiadomości
  embedding       String   // Wektor embeddings (stored as JSON string for SQLite)
  importanceScore Float    @default(0.5) // Ocena ważności 0-1
  timestamp       DateTime @default(now())
  
  // Relacje (no userId needed for single user mode)
  chatId          String
  messageId       String?  // Opcjonalne - może być null dla zagregowanych wspomnień
  
  // Kontekst i metadane
  context         String?  // Kilka poprzednich wiadomości jako kontekst
  tags            String   // Automatycznie generowane tagi (stored as JSON string)
  metadata        String?  // Dodatkowe metadane (stored as JSON string)
  
  // Indeksy dla wydajności
  @@index([chatId])  
  @@index([timestamp])
  @@index([importanceScore])
}

// Tabela do przechowywania konfiguracji użytkownika dla pamięci (single user)
model MemorySettings {
  id                    String  @id @default(cuid())
  importanceThreshold   Float   @default(0.3) // Próg ważności dla zapisywania
  maxMemoryEntries      Int     @default(10000) // Maksymalna liczba wpisów
  retentionDays         Int     @default(365) // Ile dni przechowywać wpisy
  autoCleanupEnabled    Boolean @default(true)
  
  // Nowe opcje prywatności
  memoryEnabled         Boolean @default(true) // Czy w ogóle zapisywać do pamięci
  autoDeleteOnChatRemoval Boolean @default(true) // Czy automatycznie usuwać pamięć przy usuwaniu czatu
  incognitoMode         Boolean @default(false) // Tryb incognito - nie zapisuj nic
  shareMemoryAcrossChats Boolean @default(true) // Czy dzielić pamięć między różnymi czatami
  memoryAggressiveness  String  @default("conservative") // Poziom agresywności: conservative/moderate/aggressive
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}